[{"C:\\Users\\pc\\licenta\\src\\index.js":"1","C:\\Users\\pc\\licenta\\src\\App.js":"2","C:\\Users\\pc\\licenta\\src\\reportWebVitals.js":"3","C:\\Users\\pc\\licenta\\src\\MiniApp.js":"4","C:\\Users\\pc\\licenta\\src\\components\\LoginPage.js":"5","C:\\Users\\pc\\licenta\\src\\components\\services\\LoginService.js":"6","C:\\Users\\pc\\licenta\\src\\components\\WelcomePage.js":"7","C:\\Users\\pc\\licenta\\src\\components\\AuthenticatedRoute.js":"8","C:\\Users\\pc\\licenta\\src\\components\\Header.js":"9","C:\\Users\\pc\\licenta\\src\\components\\services\\ProfileUpdateService.js":"10","C:\\Users\\pc\\licenta\\src\\components\\services\\ProjectService.js":"11","C:\\Users\\pc\\licenta\\src\\components\\pages\\student\\ProjectForStudent.js":"12","C:\\Users\\pc\\licenta\\src\\components\\pages\\student\\AvailableProjects.js":"13","C:\\Users\\pc\\licenta\\src\\components\\pages\\AccountInfo.js":"14","C:\\Users\\pc\\licenta\\src\\components\\pages\\professor\\ProjectsPage.js":"15","C:\\Users\\pc\\licenta\\src\\components\\pages\\professor\\ProjectForm.js":"16","C:\\Users\\pc\\licenta\\src\\components\\pages\\student\\StudentRequests.js":"17","C:\\Users\\pc\\licenta\\src\\components\\pages\\professor\\RequestDetails.js":"18","C:\\Users\\pc\\licenta\\src\\components\\pages\\professor\\ProjectDetails.js":"19","C:\\Users\\pc\\licenta\\src\\components\\pages\\professor\\ProjectRequests.js":"20"},{"size":500,"mtime":499162500000,"results":"21","hashOfConfig":"22"},{"size":209,"mtime":1612272407465,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":499162500000,"results":"24","hashOfConfig":"22"},{"size":3658,"mtime":1612277133921,"results":"25","hashOfConfig":"22"},{"size":3578,"mtime":1611578627148,"results":"26","hashOfConfig":"22"},{"size":1085,"mtime":1609840288680,"results":"27","hashOfConfig":"22"},{"size":574,"mtime":1609411300710,"results":"28","hashOfConfig":"22"},{"size":376,"mtime":1609087880641,"results":"29","hashOfConfig":"22"},{"size":1925,"mtime":1612267563094,"results":"30","hashOfConfig":"22"},{"size":307,"mtime":1609423931339,"results":"31","hashOfConfig":"22"},{"size":1647,"mtime":1612262685829,"results":"32","hashOfConfig":"22"},{"size":1451,"mtime":1610531754280,"results":"33","hashOfConfig":"22"},{"size":2082,"mtime":1610531849129,"results":"34","hashOfConfig":"22"},{"size":7170,"mtime":1611603600609,"results":"35","hashOfConfig":"22"},{"size":2410,"mtime":1612277317369,"results":"36","hashOfConfig":"22"},{"size":11072,"mtime":1612277213979,"results":"37","hashOfConfig":"22"},{"size":1594,"mtime":1612281033505,"results":"38","hashOfConfig":"22"},{"size":1255,"mtime":1612263032757,"results":"39","hashOfConfig":"22"},{"size":2331,"mtime":1612268777147,"results":"40","hashOfConfig":"22"},{"size":2801,"mtime":1612281299451,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"60z965",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"44"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"44"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"44"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"44"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"44"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"44"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"44"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"44"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\pc\\licenta\\src\\index.js",[],["96","97"],"C:\\Users\\pc\\licenta\\src\\App.js",[],"C:\\Users\\pc\\licenta\\src\\reportWebVitals.js",[],"C:\\Users\\pc\\licenta\\src\\MiniApp.js",["98"],"import React, {useEffect, useState} from 'react'\r\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom'\r\nimport LoginPage from './components/LoginPage'\r\nimport WelcomePage from './components/WelcomePage'\r\nimport AuthenticatedRoute from './components/AuthenticatedRoute'\r\nimport Header from './components/Header'\r\nimport AccountInfo from './components/pages/AccountInfo'\r\nimport ProjectForm from './components/pages/professor/ProjectForm'\r\nimport ProjectsPage from './components/pages/professor/ProjectsPage'\r\nimport {isUserLoggedIn, setupAxiosInterceptors} from './components/services/LoginService'\r\nimport AvailableProjects from './components/pages/student/AvailableProjects'\r\nimport ProjectForStudent from './components/pages/student/ProjectForStudent'\r\nimport StudentRequests from './components/pages/student/StudentRequests'\r\nimport RequestDetails from './components/pages/professor/RequestDetails'\r\nimport ProjectDetails from './components/pages/professor/ProjectDetails'\r\n\r\nconst MiniApp = () => {\r\n\r\n    const [activeUser, setActiveUser] = useState( JSON.parse(localStorage.getItem(\"user\")) ||\r\n        {id: 'null',\r\n        username: 'null',\r\n        firstName: 'null',\r\n        lastName : 'null',\r\n        role:'null',\r\n        password: 'null',\r\n        typeOfUser: 'null'}\r\n    )\r\n    console.log(activeUser);\r\n\r\n    useEffect(()=> {\r\n        setupAxiosInterceptors(localStorage.getItem(\"token\"))\r\n\r\n    }, [])\r\n\r\n\r\n\r\n\r\n    return (\r\n       \r\n            <Router>\r\n                <>\r\n                <Header activeUser={activeUser} setActiveUser={setActiveUser} />\r\n                <Switch>\r\n                    <Route exact path=\"/login\">\r\n                        <LoginPage setActiveUser={setActiveUser} />\r\n                    </Route>\r\n\r\n                    <AuthenticatedRoute path=\"/welcome\" >\r\n                        <WelcomePage  />\r\n                        </AuthenticatedRoute>\r\n\r\n                    <AuthenticatedRoute path=\"/accountInfo\">\r\n                        <AccountInfo activeUser={activeUser} setActiveUser={setActiveUser} />\r\n                        </AuthenticatedRoute>  \r\n                        \r\n                        <AuthenticatedRoute exact path=\"/projects\">\r\n                            <ProjectsPage activeUser={activeUser} />\r\n                        </AuthenticatedRoute>\r\n\r\n\r\n                     <AuthenticatedRoute path=\"/projects/:id\">\r\n                        <ProjectForm professorId={activeUser.id}/>\r\n                        </AuthenticatedRoute>   \r\n\r\n                     <AuthenticatedRoute path=\"/availableProjects\">\r\n                         <AvailableProjects activeUser={activeUser} />\r\n                         </AuthenticatedRoute>   \r\n\r\n                     <AuthenticatedRoute path=\"/project/:id\">\r\n                         <ProjectForStudent activeUser={activeUser} />\r\n                         </AuthenticatedRoute>  \r\n\r\n                      <AuthenticatedRoute path=\"/studentRequests\">\r\n                          <StudentRequests activeUser={activeUser}/>\r\n                          </AuthenticatedRoute>      \r\n\r\n                       <AuthenticatedRoute path=\"/request/:id\">\r\n                           <RequestDetails activeUser={activeUser} />\r\n                           </AuthenticatedRoute>   \r\n\r\n                       <AuthenticatedRoute path=\"/projectDetails/:id\">\r\n                            <ProjectDetails activeUser={activeUser}/>\r\n                       </AuthenticatedRoute>\r\n                           \r\n\r\n                </Switch>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                </>\r\n            </Router>\r\n\r\n\r\n\r\n\r\n\r\n     \r\n    )\r\n}\r\n\r\n\r\nexport default MiniApp;","C:\\Users\\pc\\licenta\\src\\components\\LoginPage.js",["99"],"\r\nimport React, {useState} from 'react';\r\nimport {  useHistory } from 'react-router-dom';\r\nimport {executeJwtAuthService, existingUser, registerSuccessful} from './services/LoginService'\r\nimport background from '../img/grad.jpg'\r\nimport './LoginPage.css'\r\n\r\nconst LoginPage = ({setActiveUser}) => {\r\n\r\n        \r\n        const history = useHistory();\r\n        const [state, setState] = useState({\r\n            username: \"\",\r\n            password: \"\",\r\n            hasLoginFailed: false,\r\n            showSuccessMessage: false\r\n\r\n        });\r\n        \r\n\r\n        function handleChange(e){\r\n            //console.log(state);\r\n            setState({\r\n                ...state,\r\n                [e.target.name] : e.target.value          \r\n                 });\r\n                 \r\n\r\n        }\r\n\r\n        function loginClicked () { \r\n        \r\n            executeJwtAuthService(state.username, state.password)\r\n            .then( (response) => { \r\n                 registerSuccessful(state.username, response.data.token);\r\n                history.push(`/welcome`)\r\n                }\r\n                ).catch( () => { \r\n                    setState({\r\n                        ...state,\r\n                        hasLoginFailed: true,\r\n                        showSuccessMessage: false});\r\n\r\n                })\r\n\r\n                existingUser(state.username).then(res =>\r\n                    {\r\n                    setActiveUser(res.data)\r\n                    localStorage.setItem(\"user\", JSON.stringify(res.data));\r\n                //    console.log(setActiveUser)\r\n                 //   localStorage.setItem(\"user\", res.data.typeOfUser)\r\n                }).catch( () => {setState({\r\n                    ...state,\r\n                    hasLoginFailed: true\r\n                })})\r\n            }\r\n            console.log(state)\r\n        \r\n            \r\n\r\n         return (<div className = \"background p-5 text-center bg-image img-fluid\"\r\n        style= {{backgroundImage: `url(${background})`,\r\n                height: '100vh',\r\n                backgroundPosition: 'center',\r\n                backgroundSize: 'cover',\r\n                backgroundRepeat: 'no-repeat'\r\n        }}\r\n>\r\n             {/* <img src={background} className=\"img\"/> */}\r\n\r\n             <div className=\"container-fluid\">\r\n\t\r\n\t\t<div className=\"card col-sm-8 col-md-4 col-lg-3 offset-md-4 offset-lg-4\">\r\n\t\t\t<div className=\"card-header\">\r\n\t\t\t\t<h3>Sign In</h3>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"card-body\">\r\n\t\t\t\t<form>\r\n\t\t\t\t\t<div className=\"input-group form-group\">\r\n                        <div className=\"input-group-prepend\">\r\n\t\t\t\t\t\t\t<span className=\"input-group-text\"><i className=\"fas fa-user\"></i></span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<input type=\"text\" className=\"form-control\" name=\"username\" placeholder=\"username\" onChange={handleChange}/>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"input-group form-group\">\r\n\t\t\t\t\t\t<div className=\"input-group-prepend\">\r\n\t\t\t\t\t\t\t<span className=\"input-group-text\"><i class=\"fas fa-key\"></i></span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<input type=\"password\" className=\"form-control\" name=\"password\" placeholder=\"password\" onChange={handleChange} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t\r\n\t\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t\t<input type=\"button\" value=\"Login\" className=\"btn float-right btn-outline-warning\" onClick={loginClicked} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"card-footer\">\r\n\t\t\t\t<div className=\"d-flex justify-content-center \">\r\n\t\t\t\t\t<a className=\"forgot\" href=\"#\">Forgot your password?</a>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\r\n</div>\r\n    </div>)\r\n\r\n    \r\n\r\n\r\n\r\n}\r\n\r\nexport default LoginPage;","C:\\Users\\pc\\licenta\\src\\components\\services\\LoginService.js",["100"],"\r\nimport React from 'react'\r\nimport axios from 'axios'\r\n\r\nexport const executeJwtAuthService = (username, password) => {\r\n      return axios.post('http://localhost:8081/authenticate', {\r\n        username,\r\n        password\r\n\r\n      })\r\n    }\r\n\r\n\r\nexport const registerSuccessful = (username, token) => {\r\n  sessionStorage.setItem('authenticatedUser', username)\r\n  localStorage.setItem(\"token\", createJwtToken(token))\r\n  setupAxiosInterceptors(createJwtToken(token))\r\n\r\n}    \r\n\r\nexport const isUserLoggedIn = () => {\r\n  let user = sessionStorage.getItem('authenticatedUser');\r\n if(user===null) return false;\r\n return true;\r\n}\r\n\r\n\r\nexport const createJwtToken = (token) =>{\r\n  return 'Bearer ' + token\r\n\r\n}\r\n\r\nexport const setupAxiosInterceptors = (token) => {\r\n\r\n  axios.interceptors.request.use(\r\n    (config) => {\r\n      if(isUserLoggedIn()){\r\n        config.headers.authorization = token;\r\n      }\r\n      return config;\r\n    }\r\n  )\r\n\r\n}\r\n\r\n\r\n\r\nexport const existingUser = (username) => {\r\n  return axios.post('http://localhost:8081/existingUser',  \r\n  {username} )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","C:\\Users\\pc\\licenta\\src\\components\\WelcomePage.js",["101","102"],"import Axios from 'axios'\r\nimport React, {useState} from 'react'\r\nimport {logout} from './services/LoginService'\r\nimport axios from 'axios'\r\n\r\nconst WelcomePage = () => {\r\n\r\n    const [message, setMessage] = useState('nu merge');\r\n    function check(){\r\n        Axios.get('http://localhost:8081/test').then(res => setMessage(res.data))\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n        <div>Salut, te ai autentificat cu succes </div>\r\n       \r\n       <button onClick={check}>Check Cors</button>\r\n       <div>{message}</div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default WelcomePage","C:\\Users\\pc\\licenta\\src\\components\\AuthenticatedRoute.js",[],"C:\\Users\\pc\\licenta\\src\\components\\Header.js",["103","104","105","106"],"import React from 'react'\r\nimport {  Link } from 'react-router-dom';\r\nimport {withRouter} from 'react-router'\r\nimport {isUserLoggedIn, logout} from './services/LoginService'\r\nimport userEvent from '@testing-library/user-event';\r\nimport isProfessor from './pages/AccountInfo'\r\n\r\n\r\n        const Header = ({activeUser, setActiveUser}) => {\r\n\r\n            function logout() {\r\n                sessionStorage.removeItem('authenticatedUser');\r\n                setActiveUser({id: ''});\r\n              }\r\n   \r\n  \r\n    return(\r\n      \r\n            <header>\r\n                <nav className=\"navbar navbar-expand-md navbar-dark bg-dark\">\r\n              {isUserLoggedIn() && <div><a className=\"navbar-brand\">{activeUser.username}</a></div>}\r\n            <ul className=\"navbar-nav\">\r\n               {isUserLoggedIn() && <li><Link className=\"nav-link\" to=\"/welcome\">Homepage</Link></li>}\r\n                {isUserLoggedIn() && activeUser.typeOfUser==='professor' && <li><Link className=\"nav-link\" to=\"/projects\">Projects</Link></li>}\r\n                {isUserLoggedIn() && activeUser.typeOfUser===\"student\"&& <li><Link className=\"nav-link\" to=\"/availableProjects\">Available Projects</Link></li>}\r\n                {isUserLoggedIn() && <li><Link className=\"nav-link\" to=\"/accountInfo\">Account Information</Link></li>}\r\n                {isUserLoggedIn() && activeUser.typeOfUser==='student' && <li><Link className=\"nav-link\" to=\"/studentRequests\">Requests</Link></li>}\r\n                \r\n            </ul>\r\n            <ul className=\"navbar nav navbar-collapse justify-content-end\">\r\n               {!isUserLoggedIn() && <li><Link  className=\"nav-link\" to=\"/login\">Login</Link></li>}\r\n                {isUserLoggedIn() && <li><Link className=\"nav-link\" to=\"/logout\" onClick={logout}>Logout</Link></li>}\r\n            </ul>\r\n                </nav>\r\n            </header>\r\n            \r\n       \r\n    )\r\n\r\n\r\n}\r\n\r\nexport default withRouter(Header);","C:\\Users\\pc\\licenta\\src\\components\\services\\ProfileUpdateService.js",[],"C:\\Users\\pc\\licenta\\src\\components\\services\\ProjectService.js",[],"C:\\Users\\pc\\licenta\\src\\components\\pages\\student\\ProjectForStudent.js",["107"],"import React, { useEffect, useState } from 'react'\r\nimport { addRequest, getProjectOwner, retrieveProjectById } from '../../services/ProjectService';\r\nimport {useParams} from 'react-router-dom';\r\n\r\n\r\nconst ProjectForStudent = ({activeUser}) => {\r\nconst{id} = useParams();\r\nconst [project, setProject] = useState('');\r\nconst [projectOwner, setProjectOwner] = useState('');\r\nconst [applied, setApplied] = useState(false)\r\n\r\nuseEffect(()=> {\r\n   \r\n       retrieveProjectById(id).then((response)=> \r\n       {setProject(response.data) \r\n        console.log(project)\r\n        getProjectOwner(response.data.professorId).then((r)=>setProjectOwner(r.data))\r\n        \r\n    \r\n    \r\n    }) \r\n       \r\n}, [])\r\n\r\nfunction sendRequest(){\r\n    addRequest({\r\n        applicationDate: new Date(),\r\n        student: activeUser,\r\n        project: project,\r\n        status : 'Request made By Student'\r\n    }).then((res) => setApplied(true))\r\n}\r\n\r\n\r\n\r\nreturn (\r\n    <div>\r\n      \r\n    <div>Title: {project.title}</div>\r\n    <div>Description: {project.description}</div>\r\n    <div>Degree Type: {project.degreeType}</div>\r\n    <div>Titular:{projectOwner} </div>\r\n    <div>RecommendedSpecialization: {project.recommendedSpecialization}</div>\r\n    {!applied ? <button className=\"btn btn-success\" onClick={sendRequest}>Apply For This Project</button>\r\n    : <div>Your request has been sent!</div>}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    </div>\r\n)\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport default ProjectForStudent;","C:\\Users\\pc\\licenta\\src\\components\\pages\\student\\AvailableProjects.js",["108"],"import React, { useEffect, useState } from 'react'\r\nimport { projectsForSpecificSpecialization } from '../../services/ProjectService'\r\nimport {  useHistory } from 'react-router';\r\n\r\n\r\n\r\nconst AvailableProjects = ({activeUser}) => {\r\n\r\n    const [projects, setProjects] = useState([]);\r\nfunction showProjects(specialization){\r\n    projectsForSpecificSpecialization(specialization,activeUser.id ).then((response)=> setProjects(response.data));\r\n}\r\nconst history = useHistory();\r\n\r\n\r\n\r\n    return(\r\n        <div>\r\n            <h1>Welcome to the project selection page</h1>\r\n            <div>Descriere despre cum functioneaza cele 3 metode de alegere a unui proiect</div>\r\n\r\n            <div>\r\n                <button onClick={()=> showProjects(\"MON\")}>MON</button>\r\n                <button onClick={()=> showProjects(\"ELA\")}>ELA</button>\r\n                <button onClick={()=> showProjects(\"CTI\")}>CTI</button>\r\n                <button onClick={()=> showProjects(\"RST\")}>RST</button>\r\n                <button onClick={()=> showProjects(\"TST\")}>TST</button>\r\n            </div>\r\n\r\n            <div className=\"container\">\r\n            <table className=\"table\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Title</th>\r\n                        <th>Description</th>\r\n                        <th>Type of Degree</th>\r\n                        \r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {projects.map(project => \r\n                        <tr key={project.id}>\r\n                            <td>{project.title}</td>\r\n                            <td>{project.description}</td>\r\n                            <td>{project.degreeType}</td>\r\n                            <td><button onClick={()=>history.push(`/project/${project.id}`)} className=\"btn btn-success\">Vezi detalii</button></td>\r\n                        </tr>)}\r\n                </tbody>\r\n            </table>\r\n           </div>\r\n            \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AvailableProjects;","C:\\Users\\pc\\licenta\\src\\components\\pages\\AccountInfo.js",["109","110","111"],"import React, {useState} from 'react'\r\nimport {  useHistory } from 'react-router';\r\nimport {Formik, Form, Field, ErrorMessage}  from 'formik'\r\nimport { updateUser } from '../services/ProfileUpdateService'\r\nimport './AccountInfo.css'\r\n\r\n\r\n\r\n\r\nconst AccountInfo = ({activeUser, setActiveUser}) => {\r\n    \r\n    const [editMode, setEditMode] = useState(false)\r\n    const {username, firstName, lastName, department, email, password, typeOfUser, avgGrade, series, degreeType } = activeUser\r\n    const history = useHistory();\r\n    \r\n\r\n    const isProfessor = () =>{\r\n        return typeOfUser==='professor'\r\n        }\r\n\r\n    \r\n\r\n    function validate(values){\r\n        let errors = {}\r\n        if(!values.firstName){\r\n            errors.firstName = 'Enter your first name'\r\n        }\r\n        if(!values.lastName){\r\n            errors.lastName = 'Enter your last name '\r\n        }\r\n        if(!values.email){\r\n            errors.email = 'Enter a valid email adress'\r\n            }\r\n        if(!values.department){\r\n            errors.department= 'Enter a department'\r\n        }\r\n            \r\n\r\n    }\r\n\r\n    function onSubmit(values){\r\n        console.log(values)\r\n        setActiveUser({\r\n            ...activeUser,\r\n           ...values\r\n        })\r\n\r\n        updateUser(activeUser).then(()=>{\r\n            setEditMode(false)\r\n        })\r\n        \r\n\r\n    }\r\n\r\n\r\n    return(\r\n    \r\n        // pe on click la edit setEditMode(true)\r\n    <div>\r\n        {!editMode ? <div>\r\n        <h2>Personal Information</h2>     <button className=\"btn btn-info d-grid gap-2 col-1 mx-auto\" onClick={()=> setEditMode(true)}>Edit</button>\r\n        <div className=\"table-responsive\">\r\n            <table className=\"table table-bordered\">\r\n            <thead>\r\n            </thead>\r\n            <tbody>\r\n                <tr>\r\n                    <th scope=\"row\">First Name</th>\r\n                    <td>{firstName}</td>\r\n                </tr>\r\n                <tr>\r\n                    <th scope=\"row\">Last Name</th>\r\n                    <td>{lastName}</td>\r\n                </tr>\r\n                <tr>\r\n                    <th scope=\"row\">Username</th>\r\n                    <td>{username}</td>\r\n                </tr>\r\n                <tr>\r\n                    <th scope=\"row\">Email Address</th>\r\n                    <td>{email}</td>\r\n                </tr>\r\n               { typeOfUser === 'professor' && <tr>\r\n                    <th scope=\"row\">Department</th>\r\n                    <td>{department}</td>\r\n                </tr> }\r\n\r\n               { typeOfUser === 'student' && <tr>\r\n                    <th scope=\"row\">Series</th>\r\n                    <td>{series}</td>\r\n                </tr>   }\r\n\r\n              {  typeOfUser === 'student' && <tr>\r\n                    <th scope=\"row\">Average Grade</th>\r\n                    <td>{avgGrade}</td>\r\n                </tr> }\r\n\r\n               { typeOfUser === 'student' && <tr>\r\n                    <th scope=\"row\">Degree Type</th>\r\n                    <td>{degreeType}</td>\r\n                </tr> }\r\n                \r\n\r\n                \r\n\r\n                \r\n                 </tbody>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            </table>\r\n            </div>\r\n\r\n\r\n        </div>   :  \r\n        <div style={{\r\n            display:'flex',\r\n            flexDirection: 'column',\r\n            justifyContent: 'center'\r\n        }}>\r\n        <Formik  initialValues={\r\n            activeUser\r\n            }\r\n            \r\n            onSubmit={(values) => onSubmit(values)}\r\n            validate={validate}\r\n            validateOnChange={false}\r\n            validateOnBlur={false}\r\n            enableReinitialize={true}\r\n            >\r\n                {\r\n                    (props) => (\r\n                        \r\n                        <Form className=\"col-sm-12 col-md-6 col-lg-4\"  >\r\n                            <fieldset className=\"form-group col-form-label\">\r\n                                <label>FirstName: </label>\r\n                                <Field type=\"text\" name=\"firstName\" className=\"form-control\" />\r\n                            </fieldset>\r\n\r\n                            <fieldset className=\"form-group\">\r\n                                <label>LastName: </label>\r\n                                <Field type=\"text\" name=\"lastName\" className=\"form-control\" />\r\n                            </fieldset>\r\n\r\n                            <fieldset className=\"form-group\">\r\n                                <label>Email: </label>\r\n                                <Field type=\"email\" name=\"email\" className=\"form-control\" />\r\n                            </fieldset>\r\n\r\n\r\n                          {isProfessor() &&  <fieldset className=\"form-group\">\r\n                                <label>Department: </label>\r\n                                <Field type=\"text\" name=\"department\" className=\"form-control\" />\r\n                            </fieldset> }\r\n\r\n                            {!isProfessor() && <fieldset className=\"form-group\">\r\n                                <label>Series: </label>\r\n                                <Field type=\"text\" name=\"series\" className=\"form-control\" />\r\n                            </fieldset>}\r\n\r\n                            { !isProfessor() && <fieldset className=\"form-group\">\r\n                                <label>Average Grade: {props.values.avgGrade}</label>\r\n                                <br />\r\n                                <Field type=\"range\" className=\"form-range\" name=\"avgGrade\" min=\"0.0\" max=\"10.0\" step=\"0.1\"/>\r\n                                    \r\n                                {/* <Field type=\"text\" name=\"avgGrade\" className=\"form-control\" /> */}\r\n                            </fieldset>}\r\n\r\n                           {!isProfessor() && \r\n                           <fieldset className=\"row mb-3\">\r\n                           <legend className=\"col-form-label col-sm-2 pt-0\">DegreeType</legend>\r\n                           <div className=\"col-sm-10\">\r\n                             <div className=\"form-check\">\r\n                               <Field className=\"form-check-input\" type=\"radio\" name=\"degreeType\" id=\"gridRadios1\" value=\"Bachelor\" />\r\n                               <label className=\"form-check-label\" for=\"gridRadios1\">\r\n                                Bachelor\r\n                               </label>\r\n                             </div>\r\n                             <div className=\"form-check\">\r\n                               <Field className=\"form-check-input\" type=\"radio\" name=\"degreeType\" id=\"gridRadios2\" value=\"Master\" />\r\n                               <label className=\"form-check-label\" for=\"gridRadios2\">\r\n                                 Master\r\n                               </label>\r\n                             </div>\r\n                           </div>\r\n                         </fieldset>\r\n                        }\r\n                        \r\n\r\n                            \r\n\r\n                            <button className=\"btn btn-success\" type=\"submit\">Save</button>\r\n\r\n\r\n                            </Form>\r\n                    )\r\n                }\r\n\r\n        </Formik>\r\n        </div>\r\n         }\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default AccountInfo","C:\\Users\\pc\\licenta\\src\\components\\pages\\professor\\ProjectsPage.js",["112","113"],"\r\nimport React, {useEffect, useState} from 'react'\r\nimport {  useHistory } from 'react-router';\r\nimport { addProject, projectsForSpecificProfessor } from '../../services/ProjectService';\r\nimport './Form.css'\r\n\r\nconst ProjectsPage = ({activeUser}) => {\r\nconst history = useHistory();\r\nconst [projects, setProjects] = useState([]);\r\n\r\n\r\n\r\nfunction retrieveProjects(){\r\n    projectsForSpecificProfessor(activeUser.id).then(\r\n        response => setProjects(response.data)\r\n)\r\n}\r\nconsole.log(projects)\r\n\r\nuseEffect(()=> {\r\n    retrieveProjects()\r\n}, [])\r\n\r\nfunction addProject(){\r\n    history.push('/projects/-1')\r\n}\r\n\r\nfunction updateProjectById(id){\r\n    history.push(`projects/${id}`)\r\n}\r\n\r\n\r\nreturn (\r\n    <div>\r\n        \r\n        <h1>Projects List</h1>\r\n        <div className=\"container\">\r\n            <table className=\"table table-striped\">\r\n                <thead className=\"table-dark\" style={{\r\n                    textAlign:'center'\r\n                }}>\r\n                    <tr>\r\n                        <th>Id</th>\r\n                        <th>Title</th>\r\n                        <th>Description</th>\r\n                        <th>Type of Degree</th>\r\n                        <th>Delete</th>\r\n                        <th>Update</th>\r\n                        <th>Details</th>\r\n                        \r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {projects.map(project => \r\n                        <tr key={project.id}>\r\n                            <td>{project.id}</td>\r\n                            <td>{project.title}</td>\r\n                            <td>{project.description}</td>\r\n                            <td>{project.degreeType}</td>\r\n                            <td><button className=\" btn btn-danger\">Delete</button></td>\r\n                            <td><button className=\"btn btn-success\" onClick={()=> updateProjectById(project.id)}>Update</button></td>\r\n                            <td><button className=\" btn btn-dark\"   onClick={()=> history.push(`/projectDetails/${project.id}`)}>Details</button></td>\r\n                        </tr>)}\r\n                </tbody>\r\n            </table>\r\n            <div className=\"row\">\r\n                <button className=\"btn btn-info\" onClick={addProject} >Add a new project</button>\r\n            </div>\r\n        </div>\r\n        \r\n        \r\n        </div>\r\n    \r\n)\r\n}\r\nexport default ProjectsPage;","C:\\Users\\pc\\licenta\\src\\components\\pages\\professor\\ProjectForm.js",["114","115","116","117","118"],"import { Formik, Form, Field, ErrorMessage, FieldArray } from 'formik'\r\nimport { useParams } from 'react-router-dom';\r\nimport React, { useEffect, useState, Fragment } from 'react'\r\nimport { addProject, projectsForSpecificProfessor, retrieveProjectById, updateProject } from '../../services/ProjectService';\r\nimport { useHistory } from 'react-router';\r\nimport {Typeahead} from 'react-bootstrap-typeahead'\r\n\r\n\r\n\r\nconst ProjectForm = ({ professorId }) => {\r\n\r\n    const { id } = useParams();\r\n    const [project, setProject] = useState({});\r\n    const history = useHistory();\r\n    const [keywordsSelected, setKeywordsSelected] = useState([]);\r\n  \r\n    const options = [ 'Java', 'OOP', 'React'];\r\n      \r\n     \r\n\r\n    function onSubmit(values) {\r\n        console.log(id);\r\n        console.log(keywordsSelected)\r\n       \r\n      const keywords = keywordsSelected.map(selected => {\r\n            if(typeof selected === 'string'){\r\n              return selected\r\n            }\r\n           \r\n            return selected.label\r\n        })\r\n\r\n\r\n        \r\n        \r\n        \r\n        \r\n        if (id === '-1') {\r\n            addProject({ ...values, keywords , professorId }).then(() => history.push('/projects'))\r\n        }\r\n        else {\r\n            updateProject({ ...values, keywords,  professorId, id }).then(() => history.push('/projects'))\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        retrieveProjectById(id).then(response => {\r\n          setProject(response.data)\r\n          if(response.data.keywords){\r\n          setKeywordsSelected(response.data.keywords)\r\n          }\r\n        \r\n        })\r\n    }, [])\r\n    console.log(project)\r\n\r\n    function validate() {\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n        \r\n            <div>Project Information for ID - {id}</div>\r\n            <Formik initialValues={{\r\n                title: project.title,\r\n                description: project.description,\r\n                degreeType: project.degreeType,\r\n                recommendedSpecialization: project.recommendedSpecialization,\r\n                year: project.year,\r\n                minGrade: project.minGrade,\r\n                maxGrade: project.maxGrade,\r\n               // keywords: project.keywords || [],\r\n                properties: project.properties || [],\r\n\r\n            }}\r\n                onSubmit={async (values) => onSubmit(values)}\r\n                validate={validate}\r\n                validateOnChange={false}\r\n                validateOnBlur={false}\r\n                enableReinitialize={true}\r\n                \r\n            >\r\n                {\r\n                    ( form ) => (\r\n                        <Form>\r\n                            {console.log(form.values)}\r\n                            <fieldset className=\"mb-3\">\r\n                                <Field className=\"form-control\" type=\"text\" name=\"title\" placeholder=\"Title\" />\r\n                            </fieldset>\r\n\r\n                            <fieldset className='mb-3'>\r\n\r\n                                <Field className=\"form-control\" name=\"description\">\r\n                                    {({\r\n                                        field, // { name, value, onChange, onBlur }\r\n                                        form: { touched, errors }, // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\r\n                                        meta,\r\n                                    }) => (\r\n                                        <div>\r\n                                            <textarea className=\"form-control\" type=\"text\" rows=\"10\" placeholder=\"Description\" {...field} />\r\n                                            {meta.touched && meta.error && (\r\n                                                <div className=\"error\">{meta.error}</div>\r\n                                            )}\r\n                                        </div>\r\n                                    )}\r\n                                </Field>\r\n                            </fieldset>\r\n\r\n\r\n                            <label className=\"form-label\">Type of Degree</label>\r\n                            <br />\r\n                            <div className=\"form-check form-check-inline\">\r\n                                <Field className=\"form-check-input\" type=\"radio\" name=\"degreeType\" value=\"Bachelor\" />\r\n                                <label className=\"form-check-label\">Bachelor</label>\r\n                            </div>\r\n\r\n                            <div className=\"form-check form-check-inline\">\r\n                                <Field className=\"form-check-input\" type=\"radio\" name=\"degreeType\" value=\"Master\" />\r\n                                <label className=\"form-check-label\">Master</label>\r\n\r\n\r\n                            </div>\r\n\r\n                           \r\n\r\n                            \r\n                                <div>Recommended for the following specialization students</div>\r\n                                \r\n                                    <div className=\"form-check form-check-inline\" >\r\n                                        <Field className=\"form-check-input\" type=\"radio\" name=\"recommendedSpecialization\" value=\"MON\" />\r\n                                        <span>MON</span>\r\n                                    </div>\r\n\r\n                                    <div className=\"form-check form-check-inline\">\r\n                                        <Field className=\"form-check-input\" type=\"radio\" name=\"recommendedSpecialization\" value=\"ELA\" />\r\n                                        <span>ELA</span>\r\n                                    </div>\r\n\r\n                                    <div className=\"form-check form-check-inline\">\r\n                                        <Field className=\"form-check-input\" type=\"radio\" name=\"recommendedSpecialization\" value=\"CTI\" />\r\n                                        <span>CTI</span>\r\n                                    </div>\r\n\r\n                                    <div className=\"form-check form-check-inline\">\r\n                                        <Field className=\"form-check-input\" type=\"radio\" name=\"recommendedSpecialization\" value=\"RST\" />\r\n                                        <span>RST</span>\r\n                                    </div>\r\n\r\n                                    <div className=\"form-check form-check-inline\">\r\n                                        <Field className=\"form-check-input\" type=\"radio\" name=\"recommendedSpecialization\" value=\"TST\" />\r\n                                        <span>TST</span>\r\n                                    </div>\r\n\r\n\r\n                              \r\n                            \r\n\r\n\r\n\r\n                           \r\n                                <div >Minimum Average Grade Required</div>\r\n                                \r\n                                <Field \r\n                                    name=\"minGrade\"\r\n                                    type=\"number\"\r\n                                    min=\"0.0\"\r\n                                    max=\"10.0\" />\r\n                                \r\n\r\n\r\n                            \r\n                                <div>Maximum Average Grade Required</div>\r\n                                <Field \r\n                                    name=\"maxGrade\"\r\n                                    type=\"number\"\r\n                                    min=\"0.0\"\r\n                                    max=\"10.0\" />\r\n              \r\n\r\n\r\n                            <FieldArray name=\"properties\">\r\n                                {({ insert, remove, push }) => (\r\n                                    <div>\r\n\r\n                                        {form.values.properties.length > 0 ?\r\n                                            form.values.properties.map((property, index) => (\r\n                                                <div className=\"row\" key={index}>\r\n                                                    <div className=\"col\">\r\n                                                        <label htmlFor={`properties.${index}.skillName`}>SkillName</label>\r\n                                                        <Field value={property.skillName}\r\n                                                            name={`properties.${index}.skillName`}\r\n                                                            type=\"text\" />\r\n                                                    </div>\r\n\r\n                                                    <div className=\"col\">\r\n                                                        <label htmlFor={`properties.${index}.skillScore`}>SkillScore</label>\r\n                                                        <Field value={property.skillScore}\r\n                                                            name={`properties.${index}.skillScore`}\r\n                                                            type=\"number\" />\r\n                                                    </div>\r\n\r\n\r\n\r\n\r\n                                                    <div className=\"col\">\r\n                                                        <a\r\n                                                            className=\"btn-floating btn-small waves-effect waves-light red\"\r\n                                                            onClick={() => remove(index)}><i className=\"materials-icons\">X</i></a>\r\n                                                    </div>\r\n                                                </div>\r\n                                            )) : []}\r\n\r\n                                        <a className=\"waves-effect waves-light btn btn-primary btn-medium\"\r\n                                            onClick={() => push({ skillName: '', skillScore: '' })}\r\n                                        >\r\n                                            Add Skill\r\n                                </a>\r\n                                    </div>\r\n                                )}\r\n                            </FieldArray>\r\n\r\n                            <br />\r\n\r\n                            <button className=\"btn btn-success float-right\" type=\"submit\">Save</button>\r\n                            <br />\r\n                        </Form>\r\n                    )\r\n                }\r\n\r\n                \r\n            </Formik>\r\n            <Fragment>\r\n\r\n\r\n           <label>Keywords</label>\r\n            <Typeahead\r\n                                id=\"typeahead-multi\"\r\n                                labelkey = \"keyword\"\r\n                                multiple\r\n                                onChange={setKeywordsSelected}\r\n                                options={options}\r\n                                placeholder=\"Choose or type...\"\r\n                                selected={keywordsSelected}\r\n                                allowNew\r\n                                newSelectionPrefix=\"Add new item: \"\r\n                               \r\n                                \r\n\r\n                                />\r\n                               \r\n                                </Fragment>\r\n                  </>\r\n\r\n    )\r\n}\r\n\r\nexport default ProjectForm;","C:\\Users\\pc\\licenta\\src\\components\\pages\\student\\StudentRequests.js",["119"],"\r\nimport React, { useEffect, useState } from 'react'\r\nimport { requestsForSpecificStudent } from '../../services/ProjectService';\r\nimport {  useHistory } from 'react-router';\r\n\r\nconst StudentRequests = ({activeUser}) => {\r\n\r\n    const [requests, setRequests] = useState([]);\r\n    const history = useHistory();\r\n\r\n    function showRequests(){\r\n        requestsForSpecificStudent(activeUser.id).then((response)=> setRequests(response.data))\r\n        \r\n    }\r\n\r\n    useEffect(()=> {\r\n        showRequests()\r\n    }, [])\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return(\r\n        <div>\r\n            <h1>Here you can see all projects you applied for!</h1>\r\n\r\n            <div className=\"container\">\r\n            <table className=\"table\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Title</th>\r\n                        <th>Description</th>\r\n                        <th>Type of Degree</th>\r\n                        \r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {requests.map(request => \r\n                        <tr key={request.id}>\r\n                            <td>{request.project.title}</td>\r\n                            <td>{request.project.description}</td>\r\n                            <td>{request.status}</td>\r\n                            <td><button onClick={()=>history.push(`/project/${request.project.id}`)} className=\"btn btn-success\">Vezi detalii</button></td>\r\n                        </tr>)}\r\n                </tbody>\r\n            </table>\r\n           </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StudentRequests","C:\\Users\\pc\\licenta\\src\\components\\pages\\professor\\RequestDetails.js",["120","121","122"],"import React, {useEffect, useState} from 'react'\r\nimport {useParams} from 'react-router-dom';\r\nimport { getRequestById } from '../../services/ProjectService';\r\nimport {  useHistory } from 'react-router';\r\n\r\n\r\nconst RequestDetails = () => {\r\n\r\n    const{id} = useParams();\r\n    const history = useHistory();\r\n    const [requestInfo, setRequestInfo] = useState()\r\n\r\n    useEffect(()=> {\r\n        getRequestById(id).then((response) => setRequestInfo(response.data))\r\n    } ,[])\r\n\r\n\r\n    function sendResponseToStudent(){\r\n        \r\n    }\r\n\r\n\r\nif (!requestInfo)\r\nreturn <span>Loading...</span>\r\n\r\n\r\n\r\n    return(\r\n        <div>\r\n\r\n            <div>Request Information</div>\r\n            <div>Project Title:{requestInfo.project.title} </div>\r\n            <div>Description:{requestInfo.project.description} </div>\r\n            <div>Student:{requestInfo.student.firstName} {requestInfo.student.lastName} </div>\r\n            <div>Type of Degree:{requestInfo.project.degreeType} </div>\r\n            <div> \r\n                <button className=\"btn btn-success\">Accept Student</button>\r\n                <button className=\"btn btn-danger\">Decline Student</button>\r\n            </div>\r\n            \r\n\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default RequestDetails","C:\\Users\\pc\\licenta\\src\\components\\pages\\professor\\ProjectDetails.js",["123","124","125","126","127","128"],"import React, { useState, useEffect } from 'react'\r\nimport { useParams } from 'react-router-dom';\r\nimport { requestsForSpecificProject, retrieveProjectById } from '../../services/ProjectService';\r\n\r\nimport ProjectRequests from './ProjectRequests';\r\n\r\n\r\n\r\n\r\n\r\nconst ProjectDetails = ({activeUser}) => {\r\n\r\n    const { id } = useParams();\r\n    const [projectInfo, setProjectInfo] = useState([]);\r\n    const [requests, setRequests] = useState([])\r\n\r\n    useEffect(() => {\r\n        retrieveProjectById(id).then(response => {\r\n            setProjectInfo(response.data)\r\n        })\r\n        console.log(projectInfo)\r\n        \r\n    }, [])\r\n\r\n\r\n    if (!projectInfo)\r\nreturn <span>Loading...</span>\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    <dl className=\"row\">\r\n                        <dt className=\"col-sm-3\">Title</dt>\r\n                        <dd className=\"col-sm-9\">{projectInfo.title}</dd>\r\n\r\n\r\n                        <dt className=\"col-sm-3\">Description</dt>\r\n                        <dd className=\"col-sm-9\">{projectInfo.description}</dd>\r\n\r\n                        <dt className=\"col-sm-3\">Type of Degree</dt>\r\n                        <dd className=\"col-sm-9\">{projectInfo.degreeType}</dd>\r\n\r\n                        <dt className=\"col-sm-3\">Recommended Specialization</dt>\r\n                        <dd className=\"col-sm-9\">{projectInfo.recommendedSpecialization}</dd>\r\n\r\n                        <dt className=\"col-sm-3\">Kewords</dt>\r\n                        <dd className=\"col-sm-9\"><p>{ projectInfo.keywords!=undefined ? projectInfo.keywords.map(keyword =>\r\n                            <span>{keyword}, </span>) : ''}</p>\r\n                        </dd>\r\n\r\n                        <dt className=\"col-sm-3\">Skills</dt>\r\n                        <dd className=\"col-sm-9\"><p>{projectInfo.properties !=undefined ? projectInfo.properties.map(skill =>\r\n                            <span>{skill.skillName} : {skill.skillScore}  </span>) : ''}</p></dd>\r\n                    </dl>\r\n                </div>\r\n\r\n                <div className=\"col\">\r\n                    <ProjectRequests projectId={id}/>\r\n                    \r\n\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default ProjectDetails;","C:\\Users\\pc\\licenta\\src\\components\\pages\\professor\\ProjectRequests.js",["129","130"],{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","severity":1,"message":"136","line":10,"column":9,"nodeType":"137","messageId":"138","endLine":10,"endColumn":23},{"ruleId":"139","severity":1,"message":"140","line":100,"column":6,"nodeType":"141","endLine":100,"endColumn":37},{"ruleId":"135","severity":1,"message":"142","line":2,"column":8,"nodeType":"137","messageId":"138","endLine":2,"endColumn":13},{"ruleId":"135","severity":1,"message":"143","line":3,"column":9,"nodeType":"137","messageId":"138","endLine":3,"endColumn":15},{"ruleId":"135","severity":1,"message":"144","line":4,"column":8,"nodeType":"137","messageId":"138","endLine":4,"endColumn":13},{"ruleId":"135","severity":1,"message":"143","line":4,"column":25,"nodeType":"137","messageId":"138","endLine":4,"endColumn":31},{"ruleId":"135","severity":1,"message":"145","line":5,"column":8,"nodeType":"137","messageId":"138","endLine":5,"endColumn":17},{"ruleId":"135","severity":1,"message":"146","line":6,"column":8,"nodeType":"137","messageId":"138","endLine":6,"endColumn":19},{"ruleId":"139","severity":1,"message":"147","line":21,"column":41,"nodeType":"141","endLine":21,"endColumn":69},{"ruleId":"148","severity":1,"message":"149","line":23,"column":4,"nodeType":"150","endLine":23,"endColumn":6,"suggestions":"151"},{"ruleId":"135","severity":1,"message":"152","line":1,"column":17,"nodeType":"137","messageId":"138","endLine":1,"endColumn":26},{"ruleId":"135","severity":1,"message":"153","line":3,"column":30,"nodeType":"137","messageId":"138","endLine":3,"endColumn":42},{"ruleId":"135","severity":1,"message":"154","line":13,"column":62,"nodeType":"137","messageId":"138","endLine":13,"endColumn":70},{"ruleId":"135","severity":1,"message":"155","line":14,"column":11,"nodeType":"137","messageId":"138","endLine":14,"endColumn":18},{"ruleId":"135","severity":1,"message":"156","line":4,"column":10,"nodeType":"137","messageId":"138","endLine":4,"endColumn":20},{"ruleId":"148","severity":1,"message":"157","line":22,"column":4,"nodeType":"150","endLine":22,"endColumn":6,"suggestions":"158"},{"ruleId":"135","severity":1,"message":"153","line":1,"column":31,"nodeType":"137","messageId":"138","endLine":1,"endColumn":43},{"ruleId":"135","severity":1,"message":"159","line":4,"column":22,"nodeType":"137","messageId":"138","endLine":4,"endColumn":50},{"ruleId":"148","severity":1,"message":"160","line":54,"column":8,"nodeType":"150","endLine":54,"endColumn":10,"suggestions":"161"},{"ruleId":"139","severity":1,"message":"147","line":207,"column":57,"nodeType":"141","endLine":209,"endColumn":91},{"ruleId":"139","severity":1,"message":"147","line":214,"column":41,"nodeType":"141","endLine":216,"endColumn":42},{"ruleId":"148","severity":1,"message":"162","line":18,"column":8,"nodeType":"150","endLine":18,"endColumn":10,"suggestions":"163"},{"ruleId":"135","severity":1,"message":"155","line":10,"column":11,"nodeType":"137","messageId":"138","endLine":10,"endColumn":18},{"ruleId":"148","severity":1,"message":"160","line":15,"column":8,"nodeType":"150","endLine":15,"endColumn":10,"suggestions":"164"},{"ruleId":"135","severity":1,"message":"165","line":18,"column":14,"nodeType":"137","messageId":"138","endLine":18,"endColumn":35},{"ruleId":"135","severity":1,"message":"166","line":3,"column":10,"nodeType":"137","messageId":"138","endLine":3,"endColumn":36},{"ruleId":"135","severity":1,"message":"167","line":15,"column":12,"nodeType":"137","messageId":"138","endLine":15,"endColumn":20},{"ruleId":"135","severity":1,"message":"168","line":15,"column":22,"nodeType":"137","messageId":"138","endLine":15,"endColumn":33},{"ruleId":"148","severity":1,"message":"169","line":23,"column":8,"nodeType":"150","endLine":23,"endColumn":10,"suggestions":"170"},{"ruleId":"171","severity":1,"message":"172","line":49,"column":75,"nodeType":"173","messageId":"174","endLine":49,"endColumn":77},{"ruleId":"171","severity":1,"message":"172","line":54,"column":77,"nodeType":"173","messageId":"174","endLine":54,"endColumn":79},{"ruleId":"135","severity":1,"message":"155","line":14,"column":11,"nodeType":"137","messageId":"138","endLine":14,"endColumn":18},{"ruleId":"148","severity":1,"message":"175","line":26,"column":8,"nodeType":"150","endLine":26,"endColumn":10,"suggestions":"176"},"no-native-reassign",["177"],"no-negated-in-lhs",["178"],"no-unused-vars","'isUserLoggedIn' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'React' is defined but never used.","'logout' is defined but never used.","'axios' is defined but never used.","'userEvent' is defined but never used.","'isProfessor' is defined but never used.","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'id' and 'project'. Either include them or remove the dependency array.","ArrayExpression",["179"],"'useEffect' is defined but never used.","'ErrorMessage' is defined but never used.","'password' is assigned a value but never used.","'history' is assigned a value but never used.","'addProject' is defined but never used.","React Hook useEffect has a missing dependency: 'retrieveProjects'. Either include it or remove the dependency array.",["180"],"'projectsForSpecificProfessor' is defined but never used.","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["181"],"React Hook useEffect has a missing dependency: 'showRequests'. Either include it or remove the dependency array.",["182"],["183"],"'sendResponseToStudent' is defined but never used.","'requestsForSpecificProject' is defined but never used.","'requests' is assigned a value but never used.","'setRequests' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'id' and 'projectInfo'. Either include them or remove the dependency array.",["184"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'projectId' and 'requests'. Either include them or remove the dependency array.",["185"],"no-global-assign","no-unsafe-negation",{"desc":"186","fix":"187"},{"desc":"188","fix":"189"},{"desc":"190","fix":"191"},{"desc":"192","fix":"193"},{"desc":"190","fix":"194"},{"desc":"195","fix":"196"},{"desc":"197","fix":"198"},"Update the dependencies array to be: [id, project]",{"range":"199","text":"200"},"Update the dependencies array to be: [retrieveProjects]",{"range":"201","text":"202"},"Update the dependencies array to be: [id]",{"range":"203","text":"204"},"Update the dependencies array to be: [showRequests]",{"range":"205","text":"206"},{"range":"207","text":"204"},"Update the dependencies array to be: [id, projectInfo]",{"range":"208","text":"209"},"Update the dependencies array to be: [projectId, requests]",{"range":"210","text":"211"},[692,694],"[id, project]",[546,548],"[retrieveProjects]",[1605,1607],"[id]",[512,514],"[showRequests]",[471,473],[628,630],"[id, projectInfo]",[762,764],"[projectId, requests]"]